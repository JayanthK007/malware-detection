from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import faiss
from langchain_community.llms import ctransformers
from langchain.chains import ConversationalRetrievalChain
import sys
#import csv
from langchain.docstore.document import Document 
from langchain.document_loaders.csv_loader  import CSVLoader


DB_FAISS_PATH="./vectorstore/db_faiss"

# columns_to_embed = ["MalFamily"]
# columns_to_metadata = ["SEND_SMS","INTERNET", "READ_PHONE_STATE","GET_TASKS", "MOUNT_UNMOUNT_FILESYSTEMS","MalFamily"]

# docs = []
# with open('./data/real_device_malware.csv', newline="", encoding='utf-8-sig') as csvfile:
#     csv_reader = csv.DictReader(csvfile)
#     for i, row in enumerate(csv_reader):
#         to_metadata = {col: row[col] for col in columns_to_metadata if col in row}
#         values_to_embed = {k: row[k] for k in columns_to_embed if k in row}
#         to_embed = "\n".join(f"{k.strip()}: {v.strip()}" for k, v in values_to_embed.items())
#         newDoc = Document(page_content=to_embed, metadata=to_metadata)
#         docs.append(newDoc)

loader=CSVLoader(file_path='./data/real_device_malware.csv',encoding='utf-8',csv_args={'delimiter':','})
data = loader.load()

# print(data)

text_splitter=RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=20)
text_chunks=text_splitter.split_documents(data)
# print(len(text_chunks))

embeddings = HuggingFaceEmbeddings(model_name='sentence-transformers/all-MiniLM-L6-v2',
                                       model_kwargs={'device': 'cpu'})

docsearch=faiss.FAISS.from_documents(data,embeddings)

docsearch.save_local(DB_FAISS_PATH)


# query="what is the value for INTERNET for malfamily DroidKungFu"

# doc_search=docsearch.similarity_search( query)

# print("Result:",doc_search)

llm=ctransformers.CTransformers(model="models/llama-2-7b-chat.Q3_K_L.gguf",
                  model_type='llama',
                  max_new_token=512,
                  temperature=0.5)

qa=ConversationalRetrievalChain.from_llm(llm,retriever=docsearch.as_retriever())

while True:
    chat_history=[]
    query = input(f"Input Prompt: ")
    if query== 'exit':
        print('Exiting')
        sys.exit()
    if query=='':
        continue
    result=qa({"question":query,"chat_history":chat_history})
    print("Response: ",result['answer'])

#if GET_TASK=Yes,INTERNET=Yes,MOUNT_UNMOUNT_FILESYSTEM=No,READ_PHONE_STATE=Yes,SEND_SMS=No, which malfamily does this permission belong to?